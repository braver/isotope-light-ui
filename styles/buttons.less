// text color indicates state, background indicates interaction
// on how to transition background images:
// http://codersblock.com/blog/gradient-animation-trick/

.btn-mixin (@bg, @fg) {

  @bg-level1: @bg;
  @bg-level2: lighten(@bg, 12%);

  color: contrast(@bg, @fg, #fff);
  background-color: transparent;
  background-image: linear-gradient(
    mix(#fff, @bg-level1 , 6%) 0%,
    darken(@bg-level1, 0%) 50%,
    darken(@bg-level1, 6%) 100%);
  background-size: auto 400%;
  background-position: 0 50%;

  border-radius: @component-border-radius;

  border: 1px solid @stroke;
  transition: all .2s .1s;
  height: auto;
  min-height: @component-line-height;
  line-height: @component-line-height;

  &.btn-xs {
    padding: 0 @space;
    line-height: @scale-b-l * 1rem;
  }
  &.btn-sm {
    padding: 0 @space;
    line-height: @scale-b-xl * 1rem;
  }
  &.btn-lg {
    padding: 0 @space;
    line-height: pow(@scale-b, 4) * 1rem;
  }

  &:focus,
  &:hover {
    color: contrast(@bg, @fg, #fff);
    background-position: 0 0;
    transition: all .1s;
    border: 1px solid darken(@bg, 24%);
  }
  &:active {
    color: contrast(@bg, @fg, #fff);
    background-image: linear-gradient(
      mix(#fff, @bg-level1 , 6%) 0%,
      darken(@bg-level1, 0%) 50%,
      darken(@bg-level1, 16) 100%);
    background-position: 0 100%;
    border: 1px solid darken(@bg, 24%);
  }
  &.selected {
    color: @fg-selected;
    background-image: linear-gradient(
      mix(#fff, @bg-level2 , 6%) 0%,
      darken(@bg-level2, 0%) 50%,
      darken(@bg-level2 , 6%) 100%);
    background-size: auto 200%;
    background-position: 0 100%;
    border: 1px solid darken(@bg, 24%);
    &:hover {
      color: @fg-selected;
      background-position: 0 50%;
      border: 1px solid darken(@bg, 24%);
    }
    &:active {
      background-position: 0 0;
      border: 1px solid darken(@bg, 24%);
    }
  }
}

.btn,
.btn.icon {
  .btn-mixin(@button-background-color, @base-fg);
}
.btn-variant(@var) {}

.btn.btn-primary {
  .btn-mixin(@button-background-color, @fg-highlight);
}
.btn.btn-info {
  .btn-mixin(@bg-info, @fg-highlight);
}
.btn.btn-success {
  .btn-mixin(@bg-success, @fg-highlight);
}
.btn.btn-warning {
  .btn-mixin(@bg-warning, @fg-highlight);
}
.btn.btn-error {
  .btn-mixin(@bg-error, @fg-highlight);
}

.btn-group {
  > .btn:first-child {
    border-left: 1px solid @stroke;
  }
  > .btn:last-child {
    border-right: 1px solid @stroke;
  }
}
.find-and-replace,
.project-find {
  .btn-group {
    display: flex;
    border-left: 1px solid @stroke;
    border-right: 1px solid @stroke;
    border-radius: @component-border-radius;
  }
  .btn-group > .btn {
    flex: 1;
    box-sizing: border-box;
    line-height: 1rem;
    border: 1px solid @stroke;
    &:first-child {
      border-left: none;
    }
    &:last-child {
      border-right: none;
    }
  }
}

.settings-view search-container .btn-group,
.settings-view .package-card .meta-controls .btn-group {
  display: flex;
}

//no real sense in the default courier for these
.project-find .btn-group.btn-group-options .btn,
.find-and-replace .btn-group-options.btn-group .btn, {
  font-family: inherit;
}
